// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Compa√±ia a la cual se le da el aplicativo
model Company {
  id              String       @id @default(uuid())
  name            String       @db.VarChar(50)
  users           CompanyUser[]
  CompanyReport   CompanyReport[]
}

// Usuario que ingresara a la aplicacion
model User {
  id          String       @id @default(uuid())
  dni         String       @db.VarChar(8)
  surname1    String       @db.VarChar(50)
  surname2    String       @db.VarChar(50)
  full_name   String       @db.VarChar(100)
  photo_code  String?      @db.VarChar(36)
  user_roles  UserRole[]
  companies   CompanyUser[]
  teams       TeamUser[]
}

model Team {
  id    String     @id @default(uuid())
  name  String
  users TeamUser[]
  report Report[]
}

model TeamUser {
  id      String     @id @default(uuid())
  user_id String
  team_id String
  user    User       @relation(fields: [user_id], references: [id])
  team    Team       @relation(fields: [team_id], references: [id])
}


// Intermedia entre User y Company
model CompanyUser {
  id          String       @id @default(uuid())
  user_id     String
  company_id  String
  user        User         @relation(fields: [user_id], references: [id])
  company     Company      @relation(fields: [company_id], references: [id])
}

// Roles que se le aplicara al usuario
model Role {
  id                String          @id @default(uuid())
  name              String          @db.VarChar(50)
  modifiable        Boolean         @db.Boolean
  user_roles        UserRole[]
  role_permissions  RolePermission[]
}

// Intermedia entre Roles y Usuario
model UserRole {
  user_role_id      String          @id @default(uuid())
  user_id           String
  role_id           String
  user              User            @relation(fields: [user_id], references: [id])
  role              Role            @relation(fields: [role_id], references: [id])
}

// Permisos que se le aplicara a los roles
model Permission {
  id                  String        @id @default(uuid())
  component_id        String        @db.VarChar(50)
  available           Boolean       @db.Boolean
  role_permissions    RolePermission[]
}

// Intermedia entre Roles y Permisos
model RolePermission {
  role_permission_id  String        @id @default(uuid())
  role_id             String        @db.VarChar(36)
  permission_id       String        @db.VarChar(36)
  role                Role          @relation(fields: [role_id], references: [id])
  permission          Permission    @relation(fields: [permission_id], references: [id])
}

// Componentes del aplicativo
model Component {
  id                  String        @id @default(uuid())
  name                String        @db.VarChar(8)
}

// Tabla de Pantalla "Registro de actividades"
model Activities {
  id              String   @id @default(uuid())
  name            String
  type            Int
  ActiviesReport  ActiviesReport[]
}
model ActiviesReport {
  id           String   @id @default(uuid())
  report_id    String
  activity_id  String
  hours        Int
  report       Report @relation(fields: [report_id], references: [id])
  activity     Activities @relation(fields: [activity_id], references: [id])
}

// Tabla de Pantalla "Corridas"
model Run {
  id                      String    @id @default(uuid())
  meters_total            Int
  meters_acum             Int
  meters_from             Int
  meters_to               Int
  length                  Int
  recuperation_percentage Int
  terrain_type1           Int
  terrain_type2           Int
  terrain_type3           Int
  observation             String
  reports                 RunReport[]
}
model RunReport {
  id           String   @id @default(uuid())
  report_id    String
  run_id       String
  report       Report   @relation(fields: [report_id], references: [id])
  run          Run      @relation(fields: [run_id], references: [id])
}

// Tabla de Pantalla "Fluidos"
model Fluids {
  id            String  @id @default(uuid())
  name          String
  ReportFluids  ReportFluids[]
}
model ReportFluids {
  id         String   @id @default(uuid())
  report_id  String
  fluid_id   String
  quantity   Int
  report     Report   @relation(fields: [report_id], references: [id])
  fluid      Fluids   @relation(fields: [fluid_id], references: [id])
}
model ReportFluidsPack {
  id        String   @id @default(uuid())
  report_id String
  M1        Int
  M2        Int
  M3        Int
  M4        Int
  PH        Int
  PPM       Int
  report    Report   @relation(fields: [report_id], references: [id])
}

// Tabla para Pantalla "Control de Herramientas"
model Tools {
  id             String   @id @default(uuid())
  name           String
  line           String
  serial_number  String
  brand          String
  matrix         String
  ReportTools    ReportTools[]
}
model ReportTools {
  id                String   @id @default(uuid())
  report_id         String
  tool_id           String
  condition         Boolean
  meters_from       Int
  drill_bit_change  Boolean
  end_condition     Boolean
  meters_to         Int
  change_motive     Int
  report            Report   @relation(fields: [report_id], references: [id])
  tool              Tools    @relation(fields: [tool_id], references: [id])
}

// Tabla para Reportes creados en "Nuevo Parte Diario"
model Report {
  id                String           @id @default(uuid())
  date              DateTime
  shift             Boolean
  probe_id          String
  platform          String
  team_id           String
  meters_from       Int
  meters_to         Int
  total_meters      Int
  surplus_meters    Int
  constant_meters   Int
  probe             Probe            @relation(fields: [probe_id], references: [id])
  team              Team             @relation(fields: [team_id], references: [id])
  ReportTools       ReportTools[]
  ReportFluidsPack  ReportFluidsPack[]
  ReportFluids      ReportFluids[]
  RunReport         RunReport[]
  ActiviesReport    ActiviesReport[]
  CompanyReport     CompanyReport[]
}
model CompanyReport {
  id              String           @id @default(uuid())
  company_id      String
  report_id       String
  report          Report           @relation(fields: [report_id], references: [id])
  company         Company          @relation(fields: [company_id], references: [id])
}

// La actividad en la que se generan reportes
model Probe {
  id              String    @id @default(uuid())
  date_ini        DateTime
  date_fin        DateTime
  job_type        Boolean
  level           Int
  labor           String
  objective_vein  String
  objective_prof  Int
  zone            String
  azimut_ini      Int
  incline_ini     Int
  horometer_ini   Int
  horometer_fin   Int
  finalized       Boolean
  Report          Report[]
}
